////********** AUTOGENERATED FILE: DO NOT REMOVE ANY COMMENT IN THIS STYLE **********////
////********** START IMPORTS **********////
import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';
import '../../../../util/end_points/end_points.dart';
import '../../../../util/exceptions/exceptions.dart';
import '../../../../util/helpers/network_call_helper/network_call_helper.dart';
import '../../domain/models/user/user.dart';
import '../../domain/usecases/register.dart';
import '../entities/user/user.dart';
import 'auth_remote_datasource.dart';
import '../../domain/usecases/login.dart';
import '../../domain/usecases/update_user.dart';

@LazySingleton(as: AuthRemoteDataSource)
class AuthRemoteDataSourceImp implements AuthRemoteDataSource {
  final Logger _logger;
  final NetworkCallHelper _networkCallHelper;

  AuthRemoteDataSourceImp({
    required Logger logger,
    required NetworkCallHelper networkCallHelper,
  })  : _logger = logger,
        _networkCallHelper = networkCallHelper;

////********** START METHODS **********////
  @override
  Future<RegisterUsecaseOutput> register(RegisterUsecaseInput input) async {
    try {
      final response = await _networkCallHelper.post(
        EndPoints.register,
        {},
      );

      _logger.i(response);

      final userEntity = UserEntity.fromJson(response['user']);

      if (!response['success']) {
        _logger.i("User updated successfully");
        throw response['message'];
      }

      return RegisterUsecaseOutput(user: User.fromEntity(userEntity));
    } catch (e) {
      _logger.e(e);
      rethrow;
    }
  }

  /// [LoginUsecaseInput] is received to [login] method as parameter
  /// [LoginUsecaseOutput] is returned from [login] method
  @override
  Future<LoginUsecaseOutput> login(LoginUsecaseInput input) async {
    try {
      final response = await _networkCallHelper.post(
        EndPoints.login,
        {
          "phone": input.phoneNumber,
        },
      );

      _logger.i(response);

      final userEntity = UserEntity.fromJson(response['user']);

      if (!response['success']) {
        _logger.i("User updated successfully");
        throw response['message'];
      }

      return LoginUsecaseOutput(user: User.fromEntity(userEntity));
    } on UserNotFoundException {
      rethrow;
    } catch (e) {
      _logger.e(e);
      rethrow;
    }
  }

  /// [UpdateUserUsecaseInput] is received to [updateUser] method as parameter
  /// [UpdateUserUsecaseOutput] is returned from [updateUser] method
  @override
  Future<UpdateUserUsecaseOutput> updateUser(
      UpdateUserUsecaseInput input) async {
    try {
      final response = await _networkCallHelper.multipart(
        EndPoints.updateUser,
        filePaths:
            (input.image == null || input.image!.isEmpty) ? [] : [input.image!],
        filesParam: 'image',
        body: {
          "userId": input.userId,
          "name": input.name,
        },
      );

      _logger.i(response);

      final userEntity = UserEntity.fromJson(response['user']);

      if (response['success']) {
        _logger.i("User updated successfully");

        return UpdateUserUsecaseOutput(user: User.fromEntity(userEntity));
      }

      throw response['message'];
    } catch (e) {
      _logger.e(e);
      rethrow;
    }
  }
}
